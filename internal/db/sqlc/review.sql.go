// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: review.sql

package db

import (
	"context"
	"database/sql"
)

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews
WHERE id = $1
`

func (q *Queries) DeleteReview(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteReview, id)
	return err
}

const insertReview = `-- name: InsertReview :one
INSERT INTO reviews(
    user_id, movie_id, rating, text
) VALUES(
    (
        SELECT id FROM users
        WHERE username=$1
    ),
    $2, $3, $4
)
RETURNING id, user_id, movie_id, rating, text
`

type InsertReviewParams struct {
	Username string         `json:"username"`
	MovieID  int64          `json:"movie_id"`
	Rating   sql.NullString `json:"rating"`
	Text     sql.NullString `json:"text"`
}

func (q *Queries) InsertReview(ctx context.Context, arg InsertReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, insertReview,
		arg.Username,
		arg.MovieID,
		arg.Rating,
		arg.Text,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MovieID,
		&i.Rating,
		&i.Text,
	)
	return i, err
}
