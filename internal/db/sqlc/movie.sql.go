// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: movie.sql

package db

import (
	"context"
	"database/sql"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies(
    name, year, director, rating
) VALUES (
    $1, $2, $3, $4
         )
RETURNING id, name, year, director, rating
`

type CreateMovieParams struct {
	Name     string         `json:"name"`
	Year     int32          `json:"year"`
	Director sql.NullString `json:"director"`
	Rating   sql.NullString `json:"rating"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, createMovie,
		arg.Name,
		arg.Year,
		arg.Director,
		arg.Rating,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Year,
		&i.Director,
		&i.Rating,
	)
	return i, err
}

const deleteMovie = `-- name: DeleteMovie :exec
DELETE FROM movies
WHERE id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMovie, id)
	return err
}

const getMovie = `-- name: GetMovie :one
SELECT id, name, year, director, rating FROM movies
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMovie(ctx context.Context, id int64) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Year,
		&i.Director,
		&i.Rating,
	)
	return i, err
}

const listMovies = `-- name: ListMovies :many
SELECT id, name, year, director, rating FROM movies
`

func (q *Queries) ListMovies(ctx context.Context) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, listMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Year,
			&i.Director,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovieRating = `-- name: UpdateMovieRating :exec
UPDATE movies
SET rating = (
    SELECT avg(rating) FROM reviews
    WHERE movie_id=$1
    )
WHERE id=$1
`

func (q *Queries) UpdateMovieRating(ctx context.Context, movieID int64) error {
	_, err := q.db.ExecContext(ctx, updateMovieRating, movieID)
	return err
}
